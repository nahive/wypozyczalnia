# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines for those models you wish to give write DB access
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class WypozAuto(models.Model):
    id = models.IntegerField(primary_key=True)
    marka = models.CharField(max_length=50)
    model = models.CharField(max_length=30)
    klasa = models.CharField(max_length=30)
    num_rej = models.CharField(max_length=10)
    wypos = models.TextField()
    silnik = models.CharField(max_length=30)
    kolor = models.CharField(max_length=20)
    licz_siedz = models.IntegerField()
    cena = models.DecimalField(max_digits=10, decimal_places=5) # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    data_wyp = models.DateField(blank=True, null=True)
    data_odd = models.DateField(blank=True, null=True)
    num_dow = models.CharField(max_length=9, blank=True)
    class Meta:
        managed = False
        db_table = 'Wypoz_auto'

class WypozFirma(models.Model):
    id = models.IntegerField(primary_key=True)
    naz_pel = models.CharField(max_length=50)
    naz_skr = models.CharField(max_length=20, blank=True)
    nip = models.CharField(max_length=10)
    reg = models.CharField(max_length=14)
    rodz_dzial = models.CharField(max_length=50, blank=True)
    num_dow_p = models.CharField(max_length=9)
    imie_p = models.CharField(max_length=20)
    naz_p = models.CharField(max_length=30)
    class Meta:
        managed = False
        db_table = 'Wypoz_firma'

class WypozKlient(models.Model):
    id = models.IntegerField(primary_key=True)
    imie = models.CharField(max_length=20)
    naz = models.CharField(max_length=30)
    miasto = models.CharField(max_length=30)
    ulica = models.CharField(max_length=30)
    email = models.CharField(max_length=75, blank=True)
    tel = models.CharField(max_length=9)
    num_dow = models.CharField(max_length=9)
    stat = models.BooleanField()
    class Meta:
        managed = False
        db_table = 'Wypoz_klient'

class WypozPracownik(models.Model):
    id = models.IntegerField(primary_key=True)
    imie = models.CharField(max_length=20)
    naz = models.CharField(max_length=30)
    miasto = models.CharField(max_length=30)
    ulica = models.CharField(max_length=30)
    data_ur = models.DateField()
    num_dow = models.CharField(max_length=9)
    class Meta:
        managed = False
        db_table = 'Wypoz_pracownik'

class WypozProtokol(models.Model):
    id = models.IntegerField(primary_key=True)
    id_sam = models.ForeignKey(WypozAuto)
    num_dow_id = models.IntegerField()
    data = models.DateField()
    opis = models.TextField()
    wycena = models.DecimalField(max_digits=10, decimal_places=5) # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    class Meta:
        managed = False
        db_table = 'Wypoz_protokol'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        managed = False
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group_id = models.IntegerField()
    permission = models.ForeignKey('AuthPermission')
    class Meta:
        managed = False
        db_table = 'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type_id = models.IntegerField()
    codename = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'auth_permission'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'auth_user'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    group = models.ForeignKey(AuthGroup)
    class Meta:
        managed = False
        db_table = 'auth_user_groups'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user_id = models.IntegerField()
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    content_type_id = models.IntegerField(blank=True, null=True)
    object_id = models.TextField(blank=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    class Meta:
        managed = False
        db_table = 'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'django_content_type'

class DjangoSession(models.Model):
    session_key = models.CharField(unique=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'django_session'

class DjangoSite(models.Model):
    id = models.IntegerField(primary_key=True)
    domain = models.CharField(max_length=100)
    name = models.CharField(max_length=50)
    class Meta:
        managed = False
        db_table = 'django_site'

